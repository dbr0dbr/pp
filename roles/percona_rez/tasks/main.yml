- name: get replication statusmeta
  shell: mysql -u root -e 'SHOW SLAVE STATUS \G' |grep Slave_.*Running
  args:
    creates: /etc/my.cnf
  ignore_errors: yes
  register: status

- name: end_host if replacation ok
  meta: end_host
  when: '(status.stdout_lines[1] is defined) and ("Slave_IO_Running: Yes" in status.stdout_lines[0]) and ("Slave_SQL_Running: Yes" in status.stdout_lines[1])'

- name: Install percona repo.
  yum:
     name: "{{ percona_repo_url}}"
     state: present
  environment: "{{ proxy_env }}"
  register: install_status

- name: "Configure Percona repository"
  shell: "percona-release enable-only pxc-{{ percona_ver }} release"
  environment: "{{ proxy_env }}"
  when: install_status.changed

- name: "Configure Percona repository"
  shell: "percona-release enable tools release"
  environment: "{{ proxy_env }}"
  when: install_status.changed

- name: Install percona cluster.
  yum:
     name: "{{ percona_xtradb }}"
  environment: "{{ proxy_env }}"

- name: Install percona xtrabackup.
  yum:
     name: "{{ percona_xtrabackup }}"
     state: present
  environment: "{{ proxy_env }}"

- name: Template configuration file for /etc/my.cnf
  template:
    src: my.cnf.j2
    dest: '/etc/my.cnf'

- name: Open ports for mysql
  firewalld:
    port: "3306/tcp"
    permanent: yes
    state: enabled
    immediate: yes

- name: set node for backup ip
  set_fact:
    node_for_backup_ip: "{{ hostvars[groups['percona'][0]]['ansible_host'] }}"






- name: clean node_for_backup
  file:
    path: '{{ backup_dir }}/transfer'
    state: absent
  delegate_to: '{{ node_for_backup_ip }}'

- name: clean slave
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ backup_dir }}'
    - '/var/lib/mysql_bak'






- name: Generate RSA host key
  shell: ssh-keygen -q -t rsa  -C "" -N "" -f /root/.ssh/id_rsa
  args:
    creates: /root/.ssh/id_rsa
    chdir: /root/.ssh
  delegate_to: '{{ node_for_backup_ip }}'

- name: Store file into /root/.ssh/id_rsa.pub
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: /tmp/id_rsa.pub
    flat: yes
  delegate_to: '{{ node_for_backup_ip }}'

- name: Set authorized key taken from file
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"

- name: ensures {{ backup_dir }} dir exists
  file:
    path: '{{ backup_dir }}'
    state: directory

- name: ensures {{ backup_dir }} dir exists
  file:
    path: '{{ backup_dir }}'
    state: directory
  delegate_to: '{{ node_for_backup_ip }}'

- name: create backup
  shell: xtrabackup --backup --user=root --target-dir={{ backup_dir }}/transfer
  args:
    creates: "{{ backup_dir }}/transfer"
  delegate_to: '{{ node_for_backup_ip }}'

- name: copy backup to slave
#  shell: echo 'rsync -avpP -e "ssh -o StrictHostKeyChecking=no" {{ backup_dir }}/transfer root@{{ansible_host}}:{{ backup_dir | dirname }} '
  shell: rsync -avpP -e "ssh -o StrictHostKeyChecking=no" {{ backup_dir }}/transfer root@{{ansible_host}}:{{ backup_dir }}
  args:
    removes: "{{ backup_dir }}/transfer"
  delegate_to: '{{ node_for_backup_ip }}'
#  register: cop

#- debug: var=cop.stdout
#- meta: end_play

- name: stop mysql
  systemd:
    state: stopped
    name: mysql

- name: backup mysql dir
  shell: mv /var/lib/mysql /var/lib/mysql_bak

- name: restore backup to slave
  shell: xtrabackup --move-back --target-dir={{ backup_dir }}/transfer
  args:
    removes: "{{ backup_dir }}"

- name: change owner /var/lib/mysql
  file:
    path: /var/lib/mysql
    state: directory
    recurse: yes
    owner: mysql
    group: mysql

- name: Create user for replication
  shell: mysql  --connect-expired-password -u root -e "{{ item }}"
  with_items:
    - "CREATE USER IF NOT EXISTS '{{ mysql_repl_user }}'@'{{ ansible_host  }}' IDENTIFIED WITH mysql_native_password BY '{{ mysql_repl_pass }}';"
    - "GRANT REPLICATION SLAVE on *.* to '{{ mysql_repl_user }}'@'{{ ansible_host }}';"
    - "FLUSH PRIVILEGES;"
  delegate_to: '{{ node_for_backup_ip }}'

- name: Template configuration file for /root/.my.cnf
  template:
    src: .my.cnf.j2
    dest: '/root/.my.cnf'

- name: copy config to slave
  shell: scp -o StrictHostKeyChecking=no /etc/my.cnf root@{{ansible_host}}:/etc/my.cnf
  delegate_to: '{{ node_for_backup_ip }}'

- name: Set server-id=2
  lineinfile:
    path: /etc/my.cnf
    regexp: '^server-id='
    line: server-id=2

- name: Set wsrep_cluster_address=gcomm://
  lineinfile:
    path: /etc/my.cnf
    regexp: '^wsrep_cluster_address='
    line: wsrep_cluster_address=gcomm://

- name: Set wsrep_node_address
  lineinfile:
    path: /etc/my.cnf
    regexp: '^wsrep_node_address='
    line: wsrep_node_address={{ ansible_host }}

- name: get log_file line
  shell: cat {{ backup_dir }}/transfer/xtrabackup_binlog_info |awk '{print $1}'
  register: log_file

- name: get log_pos line
  shell: cat {{ backup_dir }}/transfer/xtrabackup_binlog_info |awk '{print $2}'
  register: log_pos

- name: start mysql
  systemd:
    state: started
    name: mysql

- name: Set replication
  shell: mysql  --connect-expired-password -u root -e "CHANGE MASTER TO MASTER_HOST='{{ node_for_backup_ip }}', MASTER_USER='{{ mysql_repl_user }}', MASTER_PASSWORD='{{ mysql_repl_pass }}', MASTER_LOG_FILE='{{ log_file.stdout }}', MASTER_LOG_POS={{ log_pos.stdout }}; START SLAVE;"
  register: output

- debug: var=output
- debug: var=log_file
- debug: var=log_pos
- meta: end_play
- name: clean localhost
  file:
    path: /tmp/id_rsa.pub
    state: absent

- name: clean node_for_backup
  file:
    path: '{{ backup_dir }}/transfer'
    state: absent
  delegate_to: '{{ node_for_backup_ip }}'

- name: clean slave
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ backup_dir }}'
    - '/var/lib/mysql_bak'
