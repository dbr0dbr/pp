- name: install redis
  yum:
    name: redis
  environment: "{{ proxy_env }}"

- name: Configure SE Linux.
  shell: '{{ item }}'
  with_items:
    - setsebool httpd_can_network_connect_db 1
    - setsebool httpd_can_network_connect 1
    - semanage permissive -a redis_t
    - semanage permissive -a httpd_t

- name: Template configuration file for /etc/nginx/nginx.conf
  template:
    src:  nginx.conf.j2
    dest: '/etc/nginx/nginx.conf'
  notify:
    - restart nginx

- name: Set php user
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^user ='
    line: user = {{ php_user }}
  notify:
    - restart php-fpm

- name: Set php group
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^group ='
    line: group = {{ php_group }}
  notify:
    - restart php-fpm

- name: Set pm
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm ='
    line: pm = {{ pm }}
  notify:
    - restart php-fpm

- name: Set pm.max_children   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.max_children'
    line: pm.max_children = {{ pm_max_children }}
  notify:
    - restart php-fpm

- name: Set pm.start_servers   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.start_servers'
    line: pm.start_servers = {{ pm_start_servers }}
  notify:
    - restart php-fpm

- name: Set pm.min_spare_servers   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.min_spare_servers'
    line: pm.min_spare_servers = {{ pm_min_spare_servers }}
  notify:
    - restart php-fpm

- name: Set pm.max_spare_servers   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.max_spare_servers'
    line: pm.max_spare_servers = {{ pm_max_spare_servers }}
  notify:
    - restart php-fpm

- name: Set pm.max_requests   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.max_requests'
    line: pm.max_requests = {{ pm_max_requests }}
  notify:
    - restart php-fpm

- name: Set pm.process_idle_timeout   
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^pm.process_idle_timeout ='
    line: pm.process_idle_timeout = {{ pm_process_idle_timeout }}
  notify:
    - restart php-fpm

- name: Set php_value[session.save_handler]
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^php_value[session.save_handler]'
    line: php_value[session.save_handler] = session_save_handler
  notify:
    - restart php-fpm

- name: Set php_value[session.save_path]
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^php_value[session.save_path]'
    line: php_value[session.save_path] = {{ session_save_path }}
  notify:
    - restart php-fpm

- name: Set max_execution_time
  lineinfile:
    path: /etc/php.ini 
    regexp: '^max_execution_time'
    line: max_execution_time = {{ max_execution_time }}
  notify:
    - restart php-fpm

- name: Set max_input_time
  lineinfile:
    path: /etc/php.ini 
    regexp: '^max_input_time'
    line: max_input_time = {{ max_input_time }}
  notify:
    - restart php-fpm

- name: Set max_input_vars
  lineinfile:
    path: /etc/php.ini 
    regexp: '^max_input_vars'
    line: max_input_vars = {{ max_input_vars }}
  notify:
    - restart php-fpm

- name: Set memory_limit
  lineinfile:
    path: /etc/php.ini 
    regexp: '^memory_limit'
    line: memory_limit = {{ memory_limit }}
  notify:
    - restart php-fpm

- name: Set upload_max_filesize
  lineinfile:
    path: /etc/php.ini 
    regexp: '^upload_max_filesize'
    line: upload_max_filesize = {{ upload_max_filesize }}
  notify:
    - restart php-fpm

- name: Set max_file_uploads
  lineinfile:
    path: /etc/php.ini 
    regexp: '^max_file_uploads'
    line: max_file_uploads = {{ max_file_uploads }}  
  notify:
    - restart php-fpm

- name: Set display_errors
  lineinfile:
    path: /etc/php.ini 
    regexp: '^display_errors'
    line: display_errors = {{ display_errors }}
  notify:
    - restart php-fpm

- name: Set session.gc_maxlifetime
  lineinfile:
    path: /etc/php.ini 
    regexp: '^session.gc_maxlifetime'
    line: session.gc_maxlifetime = {{ session_gc_maxlifetime }}
  notify:
    - restart php-fpm

- name: add to Dynamic Extensions
  lineinfile:
    dest: /etc/php.ini
    insertafter: ';   extension=/path/to/extension/mysqli.so'
    line: "extension=php_ldap.so"
  notify:
    - restart php-fpm

- name: add to Dynamic Extensions
  lineinfile:
    dest: /etc/php.ini
    insertafter: 'extension=php_ldap.so'
    line: "extension=oci8.so"
  notify:
    - restart php-fpm

- name: Set authorized key taken from file
  ansible.posix.authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', 'id_rsa.pub') }}"

- name: Copy key 
  ansible.builtin.copy:
    src: id_rsa
    dest: /root/.ssh/id_rsa
    mode: '0600'

- name: install openssh
  yum:
    name: openssh
  environment: "{{ proxy_env }}"

- name: install openssh-clients
  yum:
    name: openssh-clients
  environment: "{{ proxy_env }}"

- name: enable and start sshd
  systemd:
    name: sshd
    state: started
    enabled: yes

- name: Install lsyncd
  yum:
     name: "{{ packages }}"
  environment: "{{ proxy_env }}"
  vars:
    packages:  
    - lua
    - lua-devel
    - pkgconfig
    - gcc
    - asciidoc
    - lsyncd

- name: Template configuration file for /etc/lsyncd.conf
  template:
    src:  lsyncd.conf.j2
    dest: '/etc/lsyncd.conf'
  notify:
    - restart lsyncd

- name: start redis
  systemd:
    state: started
    enabled: yes
    daemon_reload: yes
    name: redis

- name: Creates a cron task for php
  cron:
    name: task for php
    user: nginx
    job: "cd {{ root_path }}; /bin/php -f cron.php > /dev/null 2>&1"

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: nginx
    group: nginx
    mode: '0770'
  with_items:
    - "{{ root_path }}"
    - "{{ root_path }}/samba"
    - "{{ root_path }}/samba/RMS"
    - "{{ root_path }}/samba/OeBS"

- name: install cifs-utils
  yum:
    name: cifs-utils
  environment: "{{ proxy_env }}"

- name: Template configuration file for rms share
  template:
    src: '.rms_credentials.j2'
    dest: '/root/.rms_credentials'
    mode: 600

- name: Template configuration file for oebs share
  template:
    src: '.oebs_credentials.j2'
    dest: '/root/.oebs_credentials'
    mode: 600

- name: "mount rms share"
  mount:
    state: "mounted"
    fstype: "cifs"
    name: "{{ root_path }}/samba/RMS"
    src: "{{ rms_path }}"
    opts: "credentials=/root/.rms_credentials,file_mode=0640,dir_mode=0750,gid=root,uid=root"

- name: "mount oebs share"
  mount:
    state: "mounted"
    fstype: "cifs"
    name: "{{ root_path }}/samba/OeBS"
    src: "{{ oebs_path }}"
    opts: "credentials=/root/.oebs_credentials,file_mode=0640,dir_mode=0750,gid=root,uid=root"

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: nginx
    group: nginx
    mode: '0770'
  with_items:
    - "{{ root_path }}/samba/RMS/SP_In"
    - "{{ root_path }}/samba/RMS/SP_Out"
    - "{{ root_path }}/samba/OeBS/SP_In"
    - "{{ root_path }}/samba/OeBS/SP_Out"
